// World Conquer Online Project 2.5517 - Phoenix Project Based
// This project has been created by Felipe Vieira Vendramini
// Source Infrastructure based on Phoenix Source, written by Gareth Jensen
// This source is targeted to Conquer Online, client version 5517
// 
// Computer User: Felipe Vieira
// File Created by:  Felipe Vieira Vendramini 
// zfserver v2.5517 - ServerCore - Concurrent Random.cs
// Last Edit: 2016/11/23 07:57
// Created: 2016/11/23 07:50
namespace ServerCore.Common
{
    /// <summary>
    /// This class encapsulates an implementation of George Marsaglia's "multiply with carry" random generator.
    /// The implementation has been modified to be random across multiple threads. It provides the server's
    /// clients with unique random numbers.
    /// </summary>
    public sealed class ConcurrentRandom
    {
        // Local-Scope Variable Declarations:
        private volatile uint _w;
        private volatile uint _z;

        /// <summary>
        /// This class encapsulates an implementation of George Marsaglia's "multiply with carry" random generator.
        /// The implementation has been modified to be random across multiple threads. It provides the server's
        /// clients with unique random numbers.
        /// </summary>
        public ConcurrentRandom()
        {
            uint x = Time.Now;
            _w = x >> 16;
            _z = x % uint.MaxValue;
        }

        /// <summary> This method returns the next randomly generated number. </summary>
        public uint Next()
        {
            return ((_z = 36969 * (_z & 65535) + (_z >> 16)) << 16)
                + (_w = 18000 * (_w & 65535) + (_w >> 16));
        }

        public int Next(int high)
        {
            return (int) (Next()%(high - 1));
        }

        /// <summary> This method returns the next randomly generated number. </summary>
        public int Next(int low, int high)
        {
            return (int)(Next() % (high - 1)) + low;
        }

        /// <summary> This method returns randomly generated bytes. </summary>
        /// <param name="length">The amount of bytes to generate.</param>
        public byte[] NextBytes(int length)
        {
            byte[] array = new byte[length];
            for (int index = 0; index < length; index++)
                array[index] = (byte)Next();
            return array;
        }
    }
}
