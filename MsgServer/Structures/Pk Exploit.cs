// World Conquer Online Project 2.5517 - Phoenix Project Based
// This project has been created by Felipe Vieira Vendramini
// Source Infrastructure based on Phoenix Source, written by Gareth Jensen
// This source is targeted to Conquer Online, client version 5517
// 
// Computer User: Felipe Vieira
// File Created by:  Felipe Vieira Vendramini 
// zfserver v2.5517 - MsgServer - Pk Exploit.cs
// Last Edit: 2017/01/26 23:42
// Created: 2017/01/26 23:42

using System.Collections.Generic;
using System.Linq;
using DB.Entities;
using DB.Repositories;
using MsgServer.Structures.Entities;
using ServerCore.Common;
using ServerCore.Networking.Packets;

namespace MsgServer.Structures
{
    public sealed class PkExploit
    {
        private Character m_pOwner;

        private Dictionary<uint, DbCqPkExploit> m_pkExploits;

        public PkExploit(Character owner)
        {
            m_pOwner = owner;
            m_pkExploits = new Dictionary<uint, DbCqPkExploit>();
        }

        public bool Create()
        {
            if (m_pOwner == null) return false;

            var list = new PkExploitRepository().GetUserPkExploits(m_pOwner.Identity);
            foreach (var obj in list)
            {
                if (!m_pkExploits.ContainsKey(obj.TargetIdentity))
                    m_pkExploits.Add(obj.TargetIdentity, obj);
            }
            return true;
        }

        public void Kill(Character pTarget)
        {
            if (m_pOwner.Map.IsPrisionMap() || m_pOwner.Map.IsPkField() || m_pOwner.Map.IsSynMap()
                || m_pOwner.Map.IsTrainingMap())
                return;

            int now = UnixTimestamp.Timestamp();
            DbCqPkExploit dbExploit;
            if (m_pkExploits.TryGetValue(pTarget.Identity, out dbExploit))
            {
                dbExploit.Amount += 1;
                dbExploit.TargetName = pTarget.Name;
                dbExploit.LastTime = (uint) now;
                dbExploit.Level = pTarget.Level;
                dbExploit.BattlePower = (uint) pTarget.BattlePower;
                dbExploit.Location = pTarget.MapIdentity;
                new PkExploitRepository().SaveOrUpdate(dbExploit);
            }
            else
            {
                dbExploit = new DbCqPkExploit
                {
                    Amount = 1,
                    BattlePower = (uint) pTarget.BattlePower,
                    FirstTime = (uint) now,
                    LastTime = (uint) now,
                    Level = pTarget.Level,
                    Location = pTarget.MapIdentity,
                    TargetIdentity = pTarget.Identity,
                    TargetName = pTarget.Name,
                    UserIdentity = m_pOwner.Identity,
                    Identity = 0
                };
                new PkExploitRepository().SaveOrUpdate(dbExploit);
                if (!m_pkExploits.ContainsKey(pTarget.Identity))
                    m_pkExploits.Add(pTarget.Identity, dbExploit);
            }
        }

        public void SendAll(int nPage)
        {
            int maxPerPage = 10;
            MsgPkStatistic pMsg = new MsgPkStatistic
            {
                Subtype = 1,
                Values = (uint) m_pkExploits.Count
            };

            int nMinValue = maxPerPage*nPage;
            int nMaxValue = maxPerPage*(nPage + 1);

            int i = 0;
            foreach (var obj in m_pkExploits.Values.OrderByDescending(x => x.Amount))
            {
                if (i < nMinValue)
                {
                    i++;
                    continue;
                }
                if (i >= nMaxValue)
                    break;
                string location = "Invalid";
                if (ServerKernel.Maps.ContainsKey(obj.Location))
                    location = ServerKernel.Maps[obj.Location].Name;
                pMsg.AddTarget(obj.TargetName, location, uint.Parse(UnixTimestamp.ToDateTime(obj.LastTime).ToString("ddMMHHmm")),
                    obj.Amount, 0, obj.Level, obj.BattlePower);
                i++;
            }
            m_pOwner.Send(pMsg);
        }
    }
}